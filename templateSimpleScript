import http from 'k6/http';
import {check, group} from 'k6';
import {SharedArray} from 'k6/data';
import {scenario} from 'k6/execution';

// DO NOT MODIFY - Environment variables configuration
// These variables are set from command line and should not be changed
let API_URL = `${__ENV.API_URL}`;
let AMMO_URL = `${__ENV.AMMO_URL}`;
let RPS = `${__ENV.RPS}`;
let DURATION = `${__ENV.DURATION}`;
let STEPS = `${__ENV.STEPS}`;

export let options = {
    insecureSkipTLSVerify: true,
    summaryTrendStats: ['avg', 'min', 'med', 'max', 'p(90)', 'p(95)', 'p(99)', 'p(99.9)', 'p(99.99)', 'count'],
    scenarios: {
        {{.Name}}: {
            executor: 'ramping-arrival-rate',
            startRate: 1,
            timeUnit: '1s',
            preAllocatedVUs: 1,
            maxVUs: {{.MaxVUs}},
            stages: {{.Stages}}
        }
    }
};

function params() {
    return {
        headers: {
    {{- range $key, $value := .Headers}}
        '{{$key}}': '{{$value}}',
    {{- end}}
        },
        tags: {
            url: '{{.Path}}',
            name: '{{.Path}}',
        }
    };
}

{{ if eq .HttpMethod "post" }}
{{ if .IsStaticAmmo}}
let payload = JSON.stringify({{.StaticAmmo}})
{{ else }}
/**
 * Shared ammo array for all VUsers
 * Loads test data from JSON file specified in AMMO_URL environment variable
 * Uses SharedArray for memory efficiency across VUs
 * DO NOT MODIFY - Data loading mechanism
 */
const payloads = new SharedArray("SharedArray", function () {
  const f = JSON.parse(open(AMMO_URL));
  return f;
});
{{ end }}
{{- end -}}

{{ $url := "" }}
{{ if eq .Scheme "" }}
    {{ $url = (print "https://" .Path) }}
{{ else }}
    {{ $url = (print .Scheme "://" .Path) }}
{{ end }}

{{- if .QueryParams}}
    {{ $first := true }}
    {{- range .QueryParams}}
        {{ if $first }}
            {{ $url = (print $url "?" .Key "=" .Value) }}
            {{ $first = false }}
        {{ else }}
            {{ $url = (print $url "&" .Key "=" .Value) }}
        {{ end }}
    {{- end}}
{{- end}}

const url = '{{ $url }}';

export default function () {
    let response;
{{ if eq .HttpMethod "get" }}
    group('{{.Name}}', () => {
        try {
            response = http.{{.HttpMethod}}(url, params());
{{ else }}
    {{ if .IsStaticAmmo}}
    {{ else }}
        let payload = JSON.stringify(payloads[Math.floor(Math.random() * payloads.length)]);
    {{ end }}
        group('{{.Name}}', () => {
            try {
                response = http.{{.HttpMethod}}(url, payload, params());
{{ end }}
            check(response, {
                 "status code should be 200": res => res.status === 200,
                  });
        } catch (e) {
            console.error('Exception: ' + e.message)
        }
    });
    if (scenario.iterationInTest < 5) {
        console.warn("Counter: '" + scenario.iterationInTest + "'")
        console.warn("Data =>\n'" + JSON.stringify(response) + "'");
    }
    if (response && response.status !== 200) {
        console.error("Data broken =>"+
            "\nstatus '" + JSON.stringify(response.status) +
            "'\nstatus_text '" + JSON.stringify(response.status_text) +
            "'\nerror_code '" + JSON.stringify(response.error_code) +
            "'\nerror '" + JSON.stringify(response.error))
    }
};
