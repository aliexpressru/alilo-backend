/*
* Example: k6 run --http-debug="full" -e RPS=1 -e DURATION=5s -e STEPS=1 -e AMMO_URL=./ammo.json script.js
*/
import http from 'k6/http';
import { SharedArray } from 'k6/data';
import { check } from 'k6';

// DO NOT MODIFY - Environment variables configuration
// These variables are set from command line and should not be changed
let API_URL = `${__ENV.API_URL}`;
let AMMO_URL = `${__ENV.AMMO_URL}`;
let RPS = `${__ENV.RPS}`;
let DURATION = `${__ENV.DURATION}`;
let STEPS = `${__ENV.STEPS}`;

// DO NOT MODIFY - Core configuration variables
// These are derived from environment variables and control test behavior
let steps = STEPS;
let target = RPS;
let stages = [];

/**
 * Generates stages for ramping arrival rate scenario
 * Creates a step-like pattern for load increase
 * DO NOT MODIFY - This algorithm is critical for proper load distribution
 * @returns {Array} Array of stage objects for k6 options
 */
function getStages() {
  var stepTarget = Math.floor(target / steps);
  var stepTime = divideTimeUnit(DURATION, steps * 2);
  for (var i = 1; i <= steps; i++) {
    stages.push({ target: i * stepTarget, duration: stepTime });
    stages.push({ target: i * stepTarget, duration: stepTime });
  }

  return stages;
}

/**
 * Divides a time unit string by a specified divider
 * Handles various time units (s, m, h, d) and converts between them if needed
 * DO NOT MODIFY - Time calculation logic is complex and error-prone
 * @param {string} timeUnit - Time unit string (e.g., "30s", "5m", "1h")
 * @param {number} divider - Number to divide the time by
 * @returns {string} Resulting time unit string
 */
function divideTimeUnit(timeUnit, divider) {
  var timeRe = /(\d+)([s,m,h,d])/g;
  var timeArray = timeRe.exec(timeUnit);
  var timePostfix = timeArray[2];
  var t = parseInt(timeArray[1]) / divider;
  if (t < 1) {
    switch (timePostfix) {
      case 's':
        t = 1;
        break;
      case 'm':
        timePostfix = 's';
        t = Math.floor(t * 60);
        break;
      case 'h':
        timePostfix = 'm';
        t = Math.floor(t * 60);
        break;
      case 'd':
        timePostfix = 'h';
        t = Math.floor(t * 24);
        break;
    }
  }
  return Math.floor(t) + timePostfix;
}

/**
 * Shared ammo array for all VUsers
 * Loads test data from JSON file specified in AMMO_URL environment variable
 * Uses SharedArray for memory efficiency across VUs
 * DO NOT MODIFY - Data loading mechanism
 */
const data = new SharedArray("SharedArray", function () {
  const f = JSON.parse(open(AMMO_URL));
  return f;
});


/**
 * k6 options configuration
 * Defines the test scenario, execution strategy, and safety limits
 * DO NOT MODIFY - Execution parameters are carefully tuned for reliability
 */
export const options = {
  insecureSkipTLSVerify: true, // Skip TLS certificate validation
  scenarios: {
    alilo_load: {
      executor: 'ramping-arrival-rate', // Arrival rate based executor
      startRate: 1, // Initial requests per second
      timeUnit: '1s', // Time unit for rate
      preAllocatedVUs: 10, // Pre-allocated virtual users
      maxVUs: 300, // Maximum virtual users allowed
      stages: getStages(), // Load stages generated by getStages()
    },
  },
};

/**
 * Setup function that runs once before the test execution
 * Logs all environment variables and configuration parameters
 */
export function setup() {
  console.log("API_URL: " + API_URL);
  console.log("AMMO_URL: " + AMMO_URL);
  console.log("RPS: " + RPS);
  console.log("DURATION: " + DURATION);
  console.log("STEPS: " + STEPS);
  console.log("STEP TIME: " + divideTimeUnit(DURATION, STEPS));
}

/**
 * Returns HTTP request parameters with headers
 * Configures common HTTP headers for JSON API requests
 * @returns {Object} Request parameters object with headers
 */
function params() {
  return {
    headers: {
      'accept': '*/*',
      'accept-language': 'en-US,en;q=0.9',
      'cache-control': 'no-cache',
      'content-type': 'application/json',
    }
  }
};

/**
 * Default function executed by each Virtual User (VU)
 * Performs HTTP POST request with random payload from test data
 * Includes response validation check
 * MODIFICATION ALLOWED - This is where test logic can be customized
 */
export default function () {
  // Select random payload from the shared test data array
  let payload = data[Math.floor(Math.random() * data.length)];

  // Execute HTTP POST request
  // NOTE: You can change the URL here if needed for different endpoints
  const res = http.post("https://httpbin.org/post",
    JSON.stringify(payload),
    params()
  );

  // Validate response status code
  // NOTE: You can add additional checks here as needed
  check(res, {
    'is status 200': (r) => r.status === 200,
  });
}
