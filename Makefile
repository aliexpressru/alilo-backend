LOCAL_BIN=$(CURDIR)/bin
PROJECT_NAME=alilo-backend

export GO111MODULE=on

# Tools
# SQLBoiler is now installed locally in bin/

.PHONY: generate
generate:
	@echo "Generating proto files..."
	@echo "Using buf from: $(shell which buf)"
	@echo "PATH: $(LOCAL_BIN):$$PATH"
	PATH=$(LOCAL_BIN):$$PATH buf generate -v --path=api/qa
	@echo "Generating embedded swagger using Go embed..."
	@echo "// Code generated by Go embed. DO NOT EDIT." > embed.go
	@echo "package main" >> embed.go
	@echo "" >> embed.go
	@echo "import _ \"embed\"" >> embed.go
	@echo "" >> embed.go
	@echo "//go:embed api/api.swagger.json" >> embed.go
	@echo "var SwaggerJSON []byte" >> embed.go
	@echo "Proto generation completed! Using standard gRPC-Gateway HTTP handlers."

.PHONY: buf-lint
buf-lint:
	@echo "Running buf lint..."
	-buf lint --path=api/qa || echo "Warning: buf lint found issues, but continuing..."

.PHONY: lint
lint:
	@echo "Running golangci-lint..."
	$(LOCAL_BIN)/golangci-lint run

.PHONY: lint-fix
lint-fix:
	@echo "Running golangci-lint with auto-fix..."
	$(LOCAL_BIN)/golangci-lint run --fix

.PHONY: build
build: generate
	@echo "Building..."
	go build -v -o $(LOCAL_BIN)/$(PROJECT_NAME) .

.PHONY: run
run:
	@echo "Running..."
	go run .

.PHONY: clean
clean:
	@echo "Cleaning..."
	rm -rf $(LOCAL_BIN)
	rm -f embed.go
	rm -rf vendor

.PHONY: clean-tools
clean-tools:
	@echo "Cleaning installed tools..."
	rm -f $(LOCAL_BIN)/protoc-gen-go
	rm -f $(LOCAL_BIN)/protoc-gen-grpc-gateway
	rm -f $(LOCAL_BIN)/protoc-gen-openapiv2
	rm -f $(LOCAL_BIN)/protoc-gen-go-grpc
	rm -f $(LOCAL_BIN)/modtools
	rm -f $(LOCAL_BIN)/golangci-lint
	rm -f $(LOCAL_BIN)/sqlboiler
	rm -f $(LOCAL_BIN)/buf
	rm -f $(LOCAL_BIN)/goose

.PHONY: test
test:
	@echo "Running tests..."
	go test -v ./...

.PHONY: install-tools
install-tools:
	@echo "Installing tools to local bin directory..."
	@mkdir -p $(LOCAL_BIN)
	@echo "Installing protoc-gen-go..."
	GOFLAGS="-mod=mod" go install github.com/golang/protobuf/protoc-gen-go@v1.5.4
	@mv $(shell go env GOPATH)/bin/protoc-gen-go $(LOCAL_BIN)/
	@echo "Installing protoc-gen-grpc-gateway..."
	GOFLAGS="-mod=mod" go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@v2.16.0
	@mv $(shell go env GOPATH)/bin/protoc-gen-grpc-gateway $(LOCAL_BIN)/
	@echo "Installing protoc-gen-openapiv2..."
	GOFLAGS="-mod=mod" go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@v2.16.0
	@mv $(shell go env GOPATH)/bin/protoc-gen-openapiv2 $(LOCAL_BIN)/
	@echo "Installing protoc-gen-go-grpc..."
	GOFLAGS="-mod=mod" go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2.0
	@mv $(shell go env GOPATH)/bin/protoc-gen-go-grpc $(LOCAL_BIN)/
	@echo "Installing modtools..."
	GOFLAGS="-mod=mod" go install github.com/kannman/modtools@v0.2.0
	@mv $(shell go env GOPATH)/bin/modtools $(LOCAL_BIN)/
	@echo "Installing golangci-lint..."
	GOFLAGS="-mod=mod" go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.3.0
	@mv $(shell go env GOPATH)/bin/golangci-lint $(LOCAL_BIN)/
	@echo "Installing sqlboiler..."
	GOFLAGS="-mod=mod" go install github.com/aarondl/sqlboiler/v4@v4.19.5
	@mv $(shell go env GOPATH)/bin/sqlboiler $(LOCAL_BIN)/
	GOFLAGS="-mod=mod" go install github.com/aarondl/sqlboiler/v4/drivers/sqlboiler-psql@v4.19.5
	@mv $(shell go env GOPATH)/bin/sqlboiler-psql $(LOCAL_BIN)/
	@echo "Installing buf..."
	GOFLAGS="-mod=mod" go install github.com/bufbuild/buf/cmd/buf@v1.45.0
	@mv $(shell go env GOPATH)/bin/buf $(LOCAL_BIN)/
	@echo "Installing goose..."
	GOFLAGS="-mod=mod" go install github.com/pressly/goose/v3/cmd/goose@v3.25.0
	@mv $(shell go env GOPATH)/bin/goose $(LOCAL_BIN)/
	@echo "Tools installed to $(LOCAL_BIN)"

# Database migration commands
.PHONY: migrate-up
migrate-up:
	@echo "Running database migrations up..."
	@$(LOCAL_BIN)/goose -v -dir db/migrations -allow-missing postgres 'postgres://postgres:mysecretpassword@localhost:5432/postgres?sslmode=disable' up

.PHONY: migrate-down
migrate-down:
	@echo "Rolling back database migrations..."
	@$(LOCAL_BIN)/goose -v -dir db/migrations -allow-missing postgres 'postgres://postgres:mysecretpassword@localhost:5432/postgres?sslmode=disable' down

.PHONY: migrate-status
migrate-status:
	@echo "Checking database migration status..."
	@$(LOCAL_BIN)/goose -v -dir db/migrations -allow-missing postgres 'postgres://postgres:mysecretpassword@localhost:5432/postgres?sslmode=disable' status

.PHONY: help
help:
	@echo "Available targets:"
	@echo "  generate      - Generate proto files and embed swagger"
	@echo "  build        - Build the application"
	@echo "  run          - Run the application"
	@echo "  test         - Run tests"
	@echo "  clean        - Clean build artifacts and tools"
	@echo "  clean-tools  - Clean only installed tools"
	@echo "  install-tools - Install required tools to local bin/"
	@echo "  migrate-up   - Run database migrations up"
	@echo "  migrate-down - Roll back database migrations"
	@echo "  migrate-status - Check database migration status"
	@echo "  lint         - Run buf lint and golangci-lint"
	@echo "  lint-fix     - Run golangci-lint with auto-fix"
	@echo "  buf-lint     - Run buf lint (optional)"
	@echo ""
	@echo "Database & Models:"
	@echo "  generate-models - Generate SQLBoiler database models"
	@echo "  clean-models    - Clean generated database models"
	@echo "  regenerate-models - Clean and regenerate database models"
	@echo "  check-db        - Check database connection"
	@echo "  show-tables     - Show database tables"

# SQLBoiler commands
.PHONY: generate-models
generate-models:
	@echo "Generating SQLBoiler models..."
	@PGPASSWORD=mysecretpassword $(LOCAL_BIN)/sqlboiler psql --config db/sqlboiler.toml
	@echo "Models generated successfully!"

.PHONY: clean-models
clean-models:
	@echo "Cleaning generated models..."
	rm -rf internal/app/dbmodels/*.go
	@echo "Models cleaned successfully!"

.PHONY: regenerate-models
regenerate-models: clean-models generate-models
	@echo "Models regenerated successfully!"

.PHONY: check-db
check-db:
	@echo "Checking database connection..."
	@if ! pg_isready -h localhost -p 5432 -U postgres > /dev/null 2>&1; then \
		echo "ERROR: Cannot connect to PostgreSQL database"; \
		echo "Please ensure PostgreSQL is running and accessible"; \
		exit 1; \
	fi
	@echo "Database connection OK"

.PHONY: show-tables
show-tables:
	@echo "Database tables:"
	@PGPASSWORD=mysecretpassword psql -h localhost -p 5432 -U postgres -d postgres -c "\dt"