syntax = "proto3";
package qa.loadtesting.alilo.backend.v1;

option go_package = "github.com/aliexpressru/alilo-backend/pkg/pb/qa/loadtesting/alilo/backend/v1";


import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

import "qa/loadtesting/alilo/backend/v1/models.proto";
import "qa/loadtesting/alilo/backend/v1/project_messages.proto";

// hint: checkout protobuf style guide https://developers.google.com/protocol-buffers/docs/style
service ProjectService {

  //  GetAllProjects - Retrieve list of all projects
  rpc GetAllProjects(.qa.loadtesting.alilo.backend.v1.GetAllProjectsRequest) returns (.qa.loadtesting.alilo.backend.v1.GetAllProjectsResponse) {
    option (google.api.http) = {
      post: "/v1/projects"
      body: "*"
    };
  }

  // GetProject - Retrieve project by ID
  rpc GetProject(.qa.loadtesting.alilo.backend.v1.GetProjectRequest) returns (.qa.loadtesting.alilo.backend.v1.GetProjectResponse) {
    option (google.api.http) = {
      post: "/v1/project"
      body: "*"
    };
  }

  // CreateProject - Create new project
  rpc CreateProject(.qa.loadtesting.alilo.backend.v1.CreateProjectRequest) returns (.qa.loadtesting.alilo.backend.v1.CreateProjectResponse) {
    option (google.api.http) = {
      post: "/v1/project/create"
      body: "*"
    };
  }

  // UpdateProject - Save changes to project properties
  rpc UpdateProject(.qa.loadtesting.alilo.backend.v1.UpdateProjectRequest) returns (.qa.loadtesting.alilo.backend.v1.UpdateProjectResponse) {
    option (google.api.http) = {
      post: "/v1/project/update"
      body: "*"
    };
  }

  // DeleteProject - Recursively delete project (including all scenarios and scripts)
  rpc DeleteProject(.qa.loadtesting.alilo.backend.v1.DeleteProjectRequest) returns (.qa.loadtesting.alilo.backend.v1.DeleteProjectResponse) {
    option (google.api.http) = {
      post: "/v1/project/delete"
      body: "*"
    };
  }
}

